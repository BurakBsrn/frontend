{"ast":null,"code":"import jwtDecode from'jwt-decode';/**\n * Checks if user is authenticated\n */var isUserAuthenticated=function isUserAuthenticated(){var user=getLoggedInUser();if(!user){return false;}try{var decoded=jwtDecode(user.token);var currentTime=Date.now()/1000;if(decoded.exp<currentTime){console.warn('access token expired');return false;}else{return true;}}catch(e){console.warn('access token expired');return false;}};/**\n * Sets the logged in user\n */var setLoggedInUser=function setLoggedInUser(user){localStorage.setItem('authUser',JSON.stringify(user));};/**\n * Returns the logged in user\n */var getLoggedInUser=function getLoggedInUser(){var user=localStorage.getItem('authUser');return user?typeof user=='object'?user:JSON.parse(user):null;};export{isUserAuthenticated,setLoggedInUser,getLoggedInUser};","map":{"version":3,"sources":["/home/burak/projects/chat/frontend/src/helpers/authUtils.js"],"names":["jwtDecode","isUserAuthenticated","user","getLoggedInUser","decoded","token","currentTime","Date","now","exp","console","warn","e","setLoggedInUser","localStorage","setItem","JSON","stringify","getItem","parse"],"mappings":"AAAA,MAAOA,CAAAA,SAAP,KAAsB,YAAtB,CAEA;;GAGA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAC9B,GAAMC,CAAAA,IAAI,CAAGC,eAAe,EAA5B,CACA,GAAI,CAACD,IAAL,CAAW,CACP,MAAO,MAAP,CACH,CAED,GAAI,CACA,GAAME,CAAAA,OAAO,CAAGJ,SAAS,CAACE,IAAI,CAACG,KAAN,CAAzB,CACA,GAAMC,CAAAA,WAAW,CAAGC,IAAI,CAACC,GAAL,GAAa,IAAjC,CACA,GAAIJ,OAAO,CAACK,GAAR,CAAcH,WAAlB,CAA+B,CAC3BI,OAAO,CAACC,IAAR,CAAa,sBAAb,EACA,MAAO,MAAP,CACH,CAHD,IAIK,CACD,MAAO,KAAP,CACH,CACJ,CAAC,MAAMC,CAAN,CAAS,CACPF,OAAO,CAACC,IAAR,CAAa,sBAAb,EACA,MAAO,MAAP,CACH,CACJ,CApBD,CAsBA;;GAGA,GAAME,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACX,IAAD,CAAU,CAC9BY,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAiCC,IAAI,CAACC,SAAL,CAAef,IAAf,CAAjC,EACH,CAFD,CAIA;;GAGA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC1B,GAAMD,CAAAA,IAAI,CAAGY,YAAY,CAACI,OAAb,CAAqB,UAArB,CAAb,CACA,MAAOhB,CAAAA,IAAI,CAAI,MAAQA,CAAAA,IAAR,EAAiB,QAAjB,CAA4BA,IAA5B,CAAmCc,IAAI,CAACG,KAAL,CAAWjB,IAAX,CAAvC,CAA2D,IAAtE,CACH,CAHD,CAKA,OAASD,mBAAT,CAA8BY,eAA9B,CAA+CV,eAA/C","sourcesContent":["import jwtDecode from 'jwt-decode';\n\n/**\n * Checks if user is authenticated\n */\nconst isUserAuthenticated = () => {\n    const user = getLoggedInUser();\n    if (!user) {\n        return false;\n    }\n    \n    try {\n        const decoded = jwtDecode(user.token);\n        const currentTime = Date.now() / 1000;\n        if (decoded.exp < currentTime) {\n            console.warn('access token expired');\n            return false;\n        }\n        else {\n            return true;\n        }\n    } catch(e) {\n        console.warn('access token expired');\n        return false;\n    }\n}\n\n/**\n * Sets the logged in user\n */\nconst setLoggedInUser = (user) => {\n    localStorage.setItem('authUser', JSON.stringify(user));\n}\n\n/**\n * Returns the logged in user\n */\nconst getLoggedInUser = () => {\n    const user = localStorage.getItem('authUser');\n    return user ? (typeof (user) == 'object' ? user : JSON.parse(user)) : null;\n}\n\nexport { isUserAuthenticated, setLoggedInUser, getLoggedInUser };"]},"metadata":{},"sourceType":"module"}