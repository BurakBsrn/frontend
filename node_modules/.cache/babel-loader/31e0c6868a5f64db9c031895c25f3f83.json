{"ast":null,"code":"import _classCallCheck from\"/home/burak/projects/chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/burak/projects/chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/home/burak/projects/chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/burak/projects/chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/burak/projects/chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Input,Label}from\"reactstrap\";import{connect}from\"react-redux\";//use sortedContacts variable as global variable to sort contacts\nvar sortedContacts=[{group:\"A\",children:[{id:0,name:\"Demo\"}]}];var SelectContact=/*#__PURE__*/function(_Component){_inherits(SelectContact,_Component);var _super=_createSuper(SelectContact);function SelectContact(props){var _this;_classCallCheck(this,SelectContact);_this=_super.call(this,props);_this.state={contacts:_this.props.contacts};_this.sortContact=_this.sortContact.bind(_assertThisInitialized(_this));return _this;}_createClass(SelectContact,[{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){if(prevProps!==this.props){this.setState({contacts:this.props.contacts});}}},{key:\"sortContact\",value:function sortContact(){var data=this.state.contacts.reduce(function(r,e){try{// get first letter of name of current element\nvar group=e.name[0];// if there is no property in accumulator with this letter create it\nif(!r[group])r[group]={group:group,children:[e]};// if there is push current element to children array for that letter\nelse r[group].children.push(e);}catch(error){return sortedContacts;}// return accumulator\nreturn r;},{});// since data at this point is an object, to get array of values\n// we use Object.values method\nvar result=Object.values(data);this.setState({contacts:result});sortedContacts=result;return result;}},{key:\"componentDidMount\",value:function componentDidMount(){this.sortContact();}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.sortContact();}},{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/React.createElement(React.Fragment,null,sortedContacts.map(function(contact,key){return/*#__PURE__*/React.createElement(\"div\",{key:key},/*#__PURE__*/React.createElement(\"div\",{className:\"p-3 font-weight-bold text-primary\"},contact.group),/*#__PURE__*/React.createElement(\"ul\",{className:\"list-unstyled contact-list\"},contact.children.map(function(child,keyChild){return/*#__PURE__*/React.createElement(\"li\",{key:keyChild},/*#__PURE__*/React.createElement(\"div\",{className:\"custom-control custom-checkbox\"},/*#__PURE__*/React.createElement(Input,{type:\"checkbox\",className:\"custom-control-input\",onChange:function onChange(e){return _this2.props.handleCheck(e,child.id);},id:\"memberCheck\"+child.id,value:child.name}),/*#__PURE__*/React.createElement(Label,{className:\"custom-control-label\",htmlFor:\"memberCheck\"+child.id},child.name)));})));}));}}]);return SelectContact;}(Component);var mapStateToProps=function mapStateToProps(state){var contacts=state.Chat.contacts;return{contacts:contacts};};export default connect(mapStateToProps,{})(SelectContact);","map":{"version":3,"sources":["/home/burak/projects/chat/frontend/src/components/SelectContact.js"],"names":["React","Component","Input","Label","connect","sortedContacts","group","children","id","name","SelectContact","props","state","contacts","sortContact","bind","prevProps","setState","data","reduce","r","e","push","error","result","Object","values","map","contact","key","child","keyChild","handleCheck","mapStateToProps","Chat"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Input, Label } from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\n\r\n//use sortedContacts variable as global variable to sort contacts\r\nlet sortedContacts = [\r\n    { group : \"A\",\r\n        children : [{ id : 0, name : \"Demo\"}]\r\n    }\r\n]\r\n\r\nclass SelectContact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            contacts : this.props.contacts\r\n        }\r\n        this.sortContact = this.sortContact.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n          this.setState({\r\n            contacts : this.props.contacts\r\n          });\r\n        }\r\n    }\r\n\r\n    sortContact(){\r\n        let data = this.state.contacts.reduce((r, e) => {\r\n            try {\r\n                // get first letter of name of current element\r\n                let group = e.name[0];\r\n                // if there is no property in accumulator with this letter create it\r\n                if(!r[group]) r[group] = {group, children: [e]}\r\n                // if there is push current element to children array for that letter\r\n                else r[group].children.push(e);\r\n            } catch (error) {\r\n                return sortedContacts;\r\n            }\r\n            // return accumulator\r\n            return r;\r\n        }, {})\r\n          \r\n        // since data at this point is an object, to get array of values\r\n        // we use Object.values method\r\n        let result = Object.values(data);\r\n        this.setState({contacts : result});\r\n        sortedContacts = result;\r\n        return result;\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.sortContact();\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.sortContact();\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            \r\n            <React.Fragment>\r\n                                {\r\n                                    sortedContacts.map((contact, key) => \r\n                                        <div key={key}>\r\n                                            <div className=\"p-3 font-weight-bold text-primary\">\r\n                                                {contact.group}\r\n                                            </div>\r\n\r\n                                            <ul className=\"list-unstyled contact-list\">\r\n                                                {\r\n                                                    contact.children.map((child, keyChild) =>\r\n                                                    \r\n                                                        <li key={keyChild}>\r\n                                                            <div className=\"custom-control custom-checkbox\">\r\n                                                                <Input type=\"checkbox\" className=\"custom-control-input\" onChange={(e) => this.props.handleCheck(e, child.id)} id={\"memberCheck\"+child.id} value={child.name} />\r\n                                                                <Label className=\"custom-control-label\" htmlFor={\"memberCheck\"+child.id}>{child.name}</Label>\r\n                                                            </div>\r\n                                                        </li>\r\n                                                    )\r\n                                                }\r\n                                            </ul>\r\n                                    </div>\r\n                                    )\r\n                                }\r\n        </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { contacts } = state.Chat;\r\n    return { contacts };\r\n};\r\n\r\nexport default (connect(mapStateToProps, {  })(SelectContact));"]},"metadata":{},"sourceType":"module"}