{"ast":null,"code":"import _toConsumableArray from\"/home/burak/projects/chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/burak/projects/chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useRef}from'react';import{DropdownMenu,DropdownItem,DropdownToggle,UncontrolledDropdown,Modal,ModalHeader,ModalBody,CardBody,Button,ModalFooter}from\"reactstrap\";import{connect}from\"react-redux\";import SimpleBar from\"simplebar-react\";import{withRouter}from'react-router-dom';//Import Components\nimport UserProfileSidebar from\"../../../components/UserProfileSidebar\";import SelectContact from\"../../../components/SelectContact\";import UserHead from\"./UserHead\";import ImageList from\"./ImageList\";import ChatInput from\"./ChatInput\";import FileList from\"./FileList\";//actions\nimport{openUserSidebar,setFullUser}from\"../../../redux/actions\";//Import Images\nimport avatar4 from\"../../../assets/images/users/avatar-4.jpg\";import avatar1 from\"../../../assets/images/users/avatar-1.jpg\";//i18n\nimport{useTranslation}from'react-i18next';function UserChat(props){var ref=useRef();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),modal=_useState2[0],setModal=_useState2[1];/* intilize t variable for multi language implementation */var _useTranslation=useTranslation(),t=_useTranslation.t;//demo conversation messages\n//userType must be required\nvar _useState3=useState(props.recentChatList),_useState4=_slicedToArray(_useState3,1),allUsers=_useState4[0];var _useState5=useState(props.recentChatList[props.active_user].messages),_useState6=_slicedToArray(_useState5,2),chatMessages=_useState6[0],setchatMessages=_useState6[1];useEffect(function(){setchatMessages(props.recentChatList[props.active_user].messages);ref.current.recalculate();if(ref.current.el){ref.current.getScrollElement().scrollTop=ref.current.getScrollElement().scrollHeight;}},[props.active_user,props.recentChatList]);var toggle=function toggle(){return setModal(!modal);};var addMessage=function addMessage(message,type){var messageObj=null;var d=new Date();var n=d.getSeconds();//matches the message type is text, file or image, and create object according to it\nswitch(type){case\"textMessage\":messageObj={id:chatMessages.length+1,message:message,time:\"00:\"+n,userType:\"sender\",image:avatar4,isFileMessage:false,isImageMessage:false};break;case\"fileMessage\":messageObj={id:chatMessages.length+1,message:'file',fileMessage:message.name,size:message.size,time:\"00:\"+n,userType:\"sender\",image:avatar4,isFileMessage:true,isImageMessage:false};break;case\"imageMessage\":var imageMessage=[{image:message}];messageObj={id:chatMessages.length+1,message:'image',imageMessage:imageMessage,size:message.size,time:\"00:\"+n,userType:\"sender\",image:avatar4,isImageMessage:true,isFileMessage:false};break;default:break;}//add message object to chat        \nsetchatMessages([].concat(_toConsumableArray(chatMessages),[messageObj]));var copyallUsers=_toConsumableArray(allUsers);copyallUsers[props.active_user].messages=[].concat(_toConsumableArray(chatMessages),[messageObj]);copyallUsers[props.active_user].isTyping=false;props.setFullUser(copyallUsers);scrolltoBottom();};function scrolltoBottom(){if(ref.current.el){ref.current.getScrollElement().scrollTop=ref.current.getScrollElement().scrollHeight;}}var deleteMessage=function deleteMessage(id){var conversation=chatMessages;var filtered=conversation.filter(function(item){return item.id!==id;});setchatMessages(filtered);};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"user-chat w-100\"},/*#__PURE__*/React.createElement(\"div\",{className:\"d-lg-flex\"},/*#__PURE__*/React.createElement(\"div\",{className:props.userSidebar?\"w-70\":\"w-100\"},/*#__PURE__*/React.createElement(UserHead,null),/*#__PURE__*/React.createElement(SimpleBar,{style:{maxHeight:\"100%\"},ref:ref,className:\"chat-conversation p-3 p-lg-4\",id:\"messages\"},/*#__PURE__*/React.createElement(\"ul\",{className:\"list-unstyled mb-0\"},chatMessages.map(function(chat,key){return chat.isToday&&chat.isToday===true?/*#__PURE__*/React.createElement(\"li\",{key:\"dayTitle\"+key},/*#__PURE__*/React.createElement(\"div\",{className:\"chat-day-title\"},/*#__PURE__*/React.createElement(\"span\",{className:\"title\"},\"Today\"))):props.recentChatList[props.active_user].isGroup===true?/*#__PURE__*/React.createElement(\"li\",{key:key,className:chat.userType===\"sender\"?\"right\":\"\"},/*#__PURE__*/React.createElement(\"div\",{className:\"conversation-list\"},/*#__PURE__*/React.createElement(\"div\",{className:\"chat-avatar\"},chat.userType===\"sender\"?/*#__PURE__*/React.createElement(\"img\",{src:avatar1,alt:\"chatvia\"}):props.recentChatList[props.active_user].profilePicture===\"Null\"?/*#__PURE__*/React.createElement(\"div\",{className:\"chat-user-img align-self-center mr-3\"},/*#__PURE__*/React.createElement(\"div\",{className:\"avatar-xs\"},/*#__PURE__*/React.createElement(\"span\",{className:\"avatar-title rounded-circle bg-soft-primary text-primary\"},chat.userName&&chat.userName.charAt(0)))):/*#__PURE__*/React.createElement(\"img\",{src:props.recentChatList[props.active_user].profilePicture,alt:\"chatvia\"})),/*#__PURE__*/React.createElement(\"div\",{className:\"user-chat-content\"},/*#__PURE__*/React.createElement(\"div\",{className:\"ctext-wrap\"},/*#__PURE__*/React.createElement(\"div\",{className:\"ctext-wrap-content\"},chat.message&&/*#__PURE__*/React.createElement(\"p\",{className:\"mb-0\"},chat.message),chat.imageMessage&&/*#__PURE__*/ // image list component\nReact.createElement(ImageList,{images:chat.imageMessage}),chat.fileMessage&&/*#__PURE__*/ //file input component\nReact.createElement(FileList,{fileName:chat.fileMessage,fileSize:chat.size}),chat.isTyping&&/*#__PURE__*/React.createElement(\"p\",{className:\"mb-0\"},\"typing\",/*#__PURE__*/React.createElement(\"span\",{className:\"animate-typing\"},/*#__PURE__*/React.createElement(\"span\",{className:\"dot ml-1\"}),/*#__PURE__*/React.createElement(\"span\",{className:\"dot ml-1\"}),/*#__PURE__*/React.createElement(\"span\",{className:\"dot ml-1\"}))),!chat.isTyping&&/*#__PURE__*/React.createElement(\"p\",{className:\"chat-time mb-0\"},/*#__PURE__*/React.createElement(\"i\",{className:\"ri-time-line align-middle\"}),\" \",/*#__PURE__*/React.createElement(\"span\",{className:\"align-middle\"},chat.time))),!chat.isTyping&&/*#__PURE__*/React.createElement(UncontrolledDropdown,{className:\"align-self-start\"},/*#__PURE__*/React.createElement(DropdownToggle,{tag:\"a\"},/*#__PURE__*/React.createElement(\"i\",{className:\"ri-more-2-fill\"})),/*#__PURE__*/React.createElement(DropdownMenu,null,/*#__PURE__*/React.createElement(DropdownItem,null,t('Copy'),\" \",/*#__PURE__*/React.createElement(\"i\",{className:\"ri-file-copy-line float-right text-muted\"})),/*#__PURE__*/React.createElement(DropdownItem,null,t('Save'),\" \",/*#__PURE__*/React.createElement(\"i\",{className:\"ri-save-line float-right text-muted\"})),/*#__PURE__*/React.createElement(DropdownItem,{onClick:toggle},\"Forward \",/*#__PURE__*/React.createElement(\"i\",{className:\"ri-chat-forward-line float-right text-muted\"})),/*#__PURE__*/React.createElement(DropdownItem,{onClick:function onClick(){return deleteMessage(chat.id);}},\"Delete \",/*#__PURE__*/React.createElement(\"i\",{className:\"ri-delete-bin-line float-right text-muted\"}))))),/*#__PURE__*/React.createElement(\"div\",{className:\"conversation-name\"},chat.userType===\"sender\"?\"Patricia Smith\":chat.userName)))):/*#__PURE__*/React.createElement(\"li\",{key:key,className:chat.userType===\"sender\"?\"right\":\"\"},/*#__PURE__*/React.createElement(\"div\",{className:\"conversation-list\"},//logic for display user name and profile only once, if current and last messaged sent by same receiver\nchatMessages[key+1]?chatMessages[key].userType===chatMessages[key+1].userType?/*#__PURE__*/React.createElement(\"div\",{className:\"chat-avatar\"},/*#__PURE__*/React.createElement(\"div\",{className:\"blank-div\"})):/*#__PURE__*/React.createElement(\"div\",{className:\"chat-avatar\"},chat.userType===\"sender\"?/*#__PURE__*/React.createElement(\"img\",{src:avatar1,alt:\"chatvia\"}):props.recentChatList[props.active_user].profilePicture===\"Null\"?/*#__PURE__*/React.createElement(\"div\",{className:\"chat-user-img align-self-center mr-3\"},/*#__PURE__*/React.createElement(\"div\",{className:\"avatar-xs\"},/*#__PURE__*/React.createElement(\"span\",{className:\"avatar-title rounded-circle bg-soft-primary text-primary\"},props.recentChatList[props.active_user].name.charAt(0)))):/*#__PURE__*/React.createElement(\"img\",{src:props.recentChatList[props.active_user].profilePicture,alt:\"chatvia\"})):/*#__PURE__*/React.createElement(\"div\",{className:\"chat-avatar\"},chat.userType===\"sender\"?/*#__PURE__*/React.createElement(\"img\",{src:avatar1,alt:\"chatvia\"}):props.recentChatList[props.active_user].profilePicture===\"Null\"?/*#__PURE__*/React.createElement(\"div\",{className:\"chat-user-img align-self-center mr-3\"},/*#__PURE__*/React.createElement(\"div\",{className:\"avatar-xs\"},/*#__PURE__*/React.createElement(\"span\",{className:\"avatar-title rounded-circle bg-soft-primary text-primary\"},props.recentChatList[props.active_user].name.charAt(0)))):/*#__PURE__*/React.createElement(\"img\",{src:props.recentChatList[props.active_user].profilePicture,alt:\"chatvia\"})),/*#__PURE__*/React.createElement(\"div\",{className:\"user-chat-content\"},/*#__PURE__*/React.createElement(\"div\",{className:\"ctext-wrap\"},/*#__PURE__*/React.createElement(\"div\",{className:\"ctext-wrap-content\"},chat.message&&/*#__PURE__*/React.createElement(\"p\",{className:\"mb-0\"},chat.message),chat.imageMessage&&/*#__PURE__*/ // image list component\nReact.createElement(ImageList,{images:chat.imageMessage}),chat.fileMessage&&/*#__PURE__*/ //file input component\nReact.createElement(FileList,{fileName:chat.fileMessage,fileSize:chat.size}),chat.isTyping&&/*#__PURE__*/React.createElement(\"p\",{className:\"mb-0\"},\"typing\",/*#__PURE__*/React.createElement(\"span\",{className:\"animate-typing\"},/*#__PURE__*/React.createElement(\"span\",{className:\"dot ml-1\"}),/*#__PURE__*/React.createElement(\"span\",{className:\"dot ml-1\"}),/*#__PURE__*/React.createElement(\"span\",{className:\"dot ml-1\"}))),!chat.isTyping&&/*#__PURE__*/React.createElement(\"p\",{className:\"chat-time mb-0\"},/*#__PURE__*/React.createElement(\"i\",{className:\"ri-time-line align-middle\"}),\" \",/*#__PURE__*/React.createElement(\"span\",{className:\"align-middle\"},chat.time))),!chat.isTyping&&/*#__PURE__*/React.createElement(UncontrolledDropdown,{className:\"align-self-start\"},/*#__PURE__*/React.createElement(DropdownToggle,{tag:\"a\"},/*#__PURE__*/React.createElement(\"i\",{className:\"ri-more-2-fill\"})),/*#__PURE__*/React.createElement(DropdownMenu,null,/*#__PURE__*/React.createElement(DropdownItem,null,t('Copy'),\" \",/*#__PURE__*/React.createElement(\"i\",{className:\"ri-file-copy-line float-right text-muted\"})),/*#__PURE__*/React.createElement(DropdownItem,null,t('Save'),\" \",/*#__PURE__*/React.createElement(\"i\",{className:\"ri-save-line float-right text-muted\"})),/*#__PURE__*/React.createElement(DropdownItem,{onClick:toggle},\"Forward \",/*#__PURE__*/React.createElement(\"i\",{className:\"ri-chat-forward-line float-right text-muted\"})),/*#__PURE__*/React.createElement(DropdownItem,{onClick:function onClick(){return deleteMessage(chat.id);}},\"Delete \",/*#__PURE__*/React.createElement(\"i\",{className:\"ri-delete-bin-line float-right text-muted\"}))))),chatMessages[key+1]?chatMessages[key].userType===chatMessages[key+1].userType?null:/*#__PURE__*/React.createElement(\"div\",{className:\"conversation-name\"},chat.userType===\"sender\"?\"Patricia Smith\":props.recentChatList[props.active_user].name):/*#__PURE__*/React.createElement(\"div\",{className:\"conversation-name\"},chat.userType===\"sender\"?\"Admin\":props.recentChatList[props.active_user].name))));}))),/*#__PURE__*/React.createElement(Modal,{backdrop:\"static\",isOpen:modal,centered:true,toggle:toggle},/*#__PURE__*/React.createElement(ModalHeader,{toggle:toggle},\"Forward to...\"),/*#__PURE__*/React.createElement(ModalBody,null,/*#__PURE__*/React.createElement(CardBody,{className:\"p-2\"},/*#__PURE__*/React.createElement(SimpleBar,{style:{maxHeight:\"200px\"}},/*#__PURE__*/React.createElement(SelectContact,{handleCheck:function handleCheck(){}})),/*#__PURE__*/React.createElement(ModalFooter,{className:\"border-0\"},/*#__PURE__*/React.createElement(Button,{color:\"primary\"},\"Forward\"))))),/*#__PURE__*/React.createElement(ChatInput,{onaddMessage:addMessage})),/*#__PURE__*/React.createElement(UserProfileSidebar,{activeUser:props.recentChatList[props.active_user]}))));}var mapStateToProps=function mapStateToProps(state){var active_user=state.Chat.active_user;var userSidebar=state.Layout.userSidebar;return{active_user:active_user,userSidebar:userSidebar};};export default withRouter(connect(mapStateToProps,{openUserSidebar:openUserSidebar,setFullUser:setFullUser})(UserChat));","map":{"version":3,"sources":["/home/burak/projects/chat/frontend/src/pages/dashboard/UserChat/index.js"],"names":["React","useState","useEffect","useRef","DropdownMenu","DropdownItem","DropdownToggle","UncontrolledDropdown","Modal","ModalHeader","ModalBody","CardBody","Button","ModalFooter","connect","SimpleBar","withRouter","UserProfileSidebar","SelectContact","UserHead","ImageList","ChatInput","FileList","openUserSidebar","setFullUser","avatar4","avatar1","useTranslation","UserChat","props","ref","modal","setModal","t","recentChatList","allUsers","active_user","messages","chatMessages","setchatMessages","current","recalculate","el","getScrollElement","scrollTop","scrollHeight","toggle","addMessage","message","type","messageObj","d","Date","n","getSeconds","id","length","time","userType","image","isFileMessage","isImageMessage","fileMessage","name","size","imageMessage","copyallUsers","isTyping","scrolltoBottom","deleteMessage","conversation","filtered","filter","item","userSidebar","maxHeight","map","chat","key","isToday","isGroup","profilePicture","userName","charAt","mapStateToProps","state","Chat","Layout"],"mappings":"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","sourcesContent":["import React, { useState,useEffect, useRef } from 'react';\r\nimport { DropdownMenu, DropdownItem, DropdownToggle, UncontrolledDropdown, Modal, ModalHeader, ModalBody, CardBody, Button, ModalFooter } from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n//Import Components\r\nimport UserProfileSidebar from \"../../../components/UserProfileSidebar\";\r\nimport SelectContact from \"../../../components/SelectContact\";\r\nimport UserHead from \"./UserHead\";\r\nimport ImageList from \"./ImageList\";\r\nimport ChatInput from \"./ChatInput\";\r\nimport FileList from \"./FileList\";\r\n\r\n//actions\r\nimport { openUserSidebar,setFullUser } from \"../../../redux/actions\";\r\n\r\n//Import Images\r\nimport avatar4 from \"../../../assets/images/users/avatar-4.jpg\";\r\nimport avatar1 from \"../../../assets/images/users/avatar-1.jpg\";\r\n\r\n//i18n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nfunction UserChat(props) {\r\n\r\n    const ref = useRef();\r\n\r\n    const [modal, setModal] = useState(false);\r\n\r\n    /* intilize t variable for multi language implementation */\r\n    const { t } = useTranslation();\r\n\r\n    //demo conversation messages\r\n    //userType must be required\r\n    const [ allUsers ] = useState(props.recentChatList);\r\n    const [ chatMessages, setchatMessages ] = useState(props.recentChatList[props.active_user].messages);\r\n\r\n    useEffect(() => {\r\n        setchatMessages(props.recentChatList[props.active_user].messages);\r\n        ref.current.recalculate();\r\n        if (ref.current.el) {\r\n            ref.current.getScrollElement().scrollTop = ref.current.getScrollElement().scrollHeight;\r\n        }\r\n    },[props.active_user, props.recentChatList]);\r\n\r\n    const toggle = () => setModal(!modal);\r\n\r\n    const addMessage = (message, type) => {\r\n        var messageObj = null;\r\n\r\n        let d = new Date();\r\n        var n = d.getSeconds();\r\n\r\n        //matches the message type is text, file or image, and create object according to it\r\n        switch (type) {\r\n            case \"textMessage\":\r\n                messageObj = {\r\n                    id : chatMessages.length+1,\r\n                    message : message,\r\n                    time : \"00:\" + n,\r\n                    userType : \"sender\",\r\n                    image : avatar4,\r\n                    isFileMessage : false,\r\n                    isImageMessage : false\r\n                }\r\n                break;\r\n\r\n            case \"fileMessage\":\r\n                messageObj = {\r\n                    id : chatMessages.length+1,\r\n                    message : 'file',\r\n                    fileMessage : message.name,\r\n                    size : message.size,\r\n                    time : \"00:\" + n,\r\n                    userType : \"sender\",\r\n                    image : avatar4,\r\n                    isFileMessage : true,\r\n                    isImageMessage : false\r\n                }\r\n                break;\r\n\r\n            case \"imageMessage\":\r\n                var imageMessage = [\r\n                    { image : message },\r\n                ]\r\n\r\n                messageObj = {\r\n                    id : chatMessages.length+1,\r\n                    message : 'image',\r\n                    imageMessage : imageMessage,\r\n                    size : message.size,\r\n                    time : \"00:\" + n,\r\n                    userType : \"sender\",\r\n                    image : avatar4,\r\n                    isImageMessage : true,\r\n                    isFileMessage : false\r\n                }\r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n     \r\n        //add message object to chat        \r\n        setchatMessages([...chatMessages, messageObj]);\r\n\r\n        let copyallUsers = [...allUsers];\r\n        copyallUsers[props.active_user].messages = [...chatMessages, messageObj];\r\n        copyallUsers[props.active_user].isTyping = false;\r\n        props.setFullUser(copyallUsers);\r\n\r\n        scrolltoBottom();\r\n    }\r\n\r\n    function scrolltoBottom(){\r\n        if (ref.current.el) {\r\n            ref.current.getScrollElement().scrollTop = ref.current.getScrollElement().scrollHeight;\r\n        }\r\n    }\r\n\r\n\r\n    const deleteMessage = (id) => {\r\n        let conversation = chatMessages;\r\n\r\n        var filtered = conversation.filter(function (item) {\r\n            return item.id !== id;\r\n        });\r\n\r\n        setchatMessages(filtered);\r\n    }\r\n\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"user-chat w-100\">\r\n                \r\n                <div className=\"d-lg-flex\">\r\n\r\n                    <div className={ props.userSidebar ? \"w-70\" : \"w-100\" }>\r\n\r\n                        {/* render user head */}\r\n                        <UserHead /> \r\n\r\n                            <SimpleBar\r\n                                style={{ maxHeight: \"100%\" }}\r\n                                ref={ref}\r\n                                className=\"chat-conversation p-3 p-lg-4\"\r\n                                id=\"messages\">\r\n                            <ul className=\"list-unstyled mb-0\">\r\n                            \r\n                                \r\n                                {\r\n                                    chatMessages.map((chat, key) => \r\n                                        chat.isToday && chat.isToday === true ? <li key={\"dayTitle\" + key}> \r\n                                            <div className=\"chat-day-title\">\r\n                                                <span className=\"title\">Today</span>\r\n                                            </div>\r\n                                        </li> : \r\n                                        (props.recentChatList[props.active_user].isGroup === true) ? \r\n                                            <li key={key} className={chat.userType === \"sender\" ? \"right\" : \"\"}>\r\n                                                <div className=\"conversation-list\">\r\n                                                    \r\n                                                    <div className=\"chat-avatar\">\r\n                                                    {chat.userType === \"sender\" ?   <img src={avatar1} alt=\"chatvia\" /> : \r\n                                                        props.recentChatList[props.active_user].profilePicture === \"Null\" ?\r\n                                                                <div className=\"chat-user-img align-self-center mr-3\">\r\n                                                                            <div className=\"avatar-xs\">\r\n                                                                                <span className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                                                                    {chat.userName && chat.userName.charAt(0)}                                                                                    \r\n                                                                                </span>\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                        :  <img src={props.recentChatList[props.active_user].profilePicture} alt=\"chatvia\" />\r\n                                                    }\r\n                                                    </div>\r\n                \r\n                                                    <div className=\"user-chat-content\">\r\n                                                        <div className=\"ctext-wrap\">\r\n                                                            <div className=\"ctext-wrap-content\">\r\n                                                                {\r\n                                                                    chat.message &&\r\n                                                                        <p className=\"mb-0\">\r\n                                                                            {chat.message}\r\n                                                                        </p>\r\n                                                                }\r\n                                                                {\r\n                                                                    chat.imageMessage &&\r\n                                                                        // image list component\r\n                                                                        <ImageList images={chat.imageMessage} />\r\n                                                                }\r\n                                                                {\r\n                                                                    chat.fileMessage &&\r\n                                                                        //file input component\r\n                                                                        <FileList fileName={chat.fileMessage} fileSize={chat.size} />\r\n                                                                }\r\n                                                                {\r\n                                                                    chat.isTyping &&\r\n                                                                        <p className=\"mb-0\">\r\n                                                                            typing\r\n                                                                            <span className=\"animate-typing\">\r\n                                                                                <span className=\"dot ml-1\"></span>\r\n                                                                                <span className=\"dot ml-1\"></span>\r\n                                                                                <span className=\"dot ml-1\"></span>\r\n                                                                            </span>\r\n                                                                        </p>\r\n                                                                }\r\n                                                                {\r\n                                                                    !chat.isTyping && <p className=\"chat-time mb-0\"><i className=\"ri-time-line align-middle\"></i> <span className=\"align-middle\">{chat.time}</span></p>\r\n                                                                }\r\n                                                            </div>\r\n                                                            {\r\n                                                                !chat.isTyping &&\r\n                                                                    <UncontrolledDropdown className=\"align-self-start\">\r\n                                                                        <DropdownToggle tag=\"a\">\r\n                                                                            <i className=\"ri-more-2-fill\"></i>\r\n                                                                        </DropdownToggle>\r\n                                                                        <DropdownMenu>\r\n                                                                            <DropdownItem>{t('Copy')} <i className=\"ri-file-copy-line float-right text-muted\"></i></DropdownItem>\r\n                                                                            <DropdownItem>{t('Save')} <i className=\"ri-save-line float-right text-muted\"></i></DropdownItem>\r\n                                                                            <DropdownItem onClick={toggle}>Forward <i className=\"ri-chat-forward-line float-right text-muted\"></i></DropdownItem>\r\n                                                                            <DropdownItem onClick={() => deleteMessage(chat.id) }>Delete <i className=\"ri-delete-bin-line float-right text-muted\"></i></DropdownItem>\r\n                                                                        </DropdownMenu>\r\n                                                                    </UncontrolledDropdown>\r\n                                                            }\r\n                                                            \r\n                                                        </div>\r\n                                                        {\r\n                                                            <div className=\"conversation-name\">{chat.userType === \"sender\" ? \"Patricia Smith\" : chat.userName}</div>\r\n                                                        }\r\n                                                    </div>\r\n                                                </div>\r\n                                            </li>\r\n                                        :\r\n                                            <li key={key} className={chat.userType === \"sender\" ? \"right\" : \"\"}>\r\n                                                <div className=\"conversation-list\">\r\n                                                        {\r\n                                                            //logic for display user name and profile only once, if current and last messaged sent by same receiver\r\n                                                            chatMessages[key+1] ? chatMessages[key].userType === chatMessages[key+1].userType ? \r\n                                                            \r\n                                                            <div className=\"chat-avatar\">\r\n                                                                <div className=\"blank-div\"></div>\r\n                                                            </div>\r\n                                                            :  \r\n                                                                <div className=\"chat-avatar\">\r\n                                                                    {chat.userType === \"sender\" ?   <img src={avatar1} alt=\"chatvia\" /> : \r\n                                                                        props.recentChatList[props.active_user].profilePicture === \"Null\" ?\r\n                                                                                <div className=\"chat-user-img align-self-center mr-3\">\r\n                                                                                            <div className=\"avatar-xs\">\r\n                                                                                                <span className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                                                                                    {props.recentChatList[props.active_user].name.charAt(0)}\r\n                                                                                                </span>\r\n                                                                                            </div>\r\n                                                                                        </div>\r\n                                                                        :  <img src={props.recentChatList[props.active_user].profilePicture} alt=\"chatvia\" />\r\n                                                                    }\r\n                                                                </div>\r\n                                                            :   <div className=\"chat-avatar\">\r\n                                                                    {chat.userType === \"sender\" ?   <img src={avatar1} alt=\"chatvia\" /> : \r\n                                                                        props.recentChatList[props.active_user].profilePicture === \"Null\" ?\r\n                                                                                <div className=\"chat-user-img align-self-center mr-3\">\r\n                                                                                            <div className=\"avatar-xs\">\r\n                                                                                                <span className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                                                                                    {props.recentChatList[props.active_user].name.charAt(0)}\r\n                                                                                                </span>\r\n                                                                                            </div>\r\n                                                                                        </div>\r\n                                                                        :  <img src={props.recentChatList[props.active_user].profilePicture} alt=\"chatvia\" />\r\n                                                                    }\r\n                                                                </div>\r\n                                                        }\r\n                                                    \r\n                \r\n                                                    <div className=\"user-chat-content\">\r\n                                                        <div className=\"ctext-wrap\">\r\n                                                            <div className=\"ctext-wrap-content\">\r\n                                                                {\r\n                                                                    chat.message &&\r\n                                                                        <p className=\"mb-0\">\r\n                                                                            {chat.message}\r\n                                                                        </p>\r\n                                                                }\r\n                                                                {\r\n                                                                    chat.imageMessage &&\r\n                                                                        // image list component\r\n                                                                        <ImageList images={chat.imageMessage} />\r\n                                                                }\r\n                                                                {\r\n                                                                    chat.fileMessage &&\r\n                                                                        //file input component\r\n                                                                        <FileList fileName={chat.fileMessage} fileSize={chat.size} />\r\n                                                                }\r\n                                                                {\r\n                                                                    chat.isTyping &&\r\n                                                                        <p className=\"mb-0\">\r\n                                                                            typing\r\n                                                                            <span className=\"animate-typing\">\r\n                                                                                <span className=\"dot ml-1\"></span>\r\n                                                                                <span className=\"dot ml-1\"></span>\r\n                                                                                <span className=\"dot ml-1\"></span>\r\n                                                                            </span>\r\n                                                                        </p>\r\n                                                                }\r\n                                                                {\r\n                                                                    !chat.isTyping && <p className=\"chat-time mb-0\"><i className=\"ri-time-line align-middle\"></i> <span className=\"align-middle\">{chat.time}</span></p>\r\n                                                                }\r\n                                                            </div>\r\n                                                            {\r\n                                                                !chat.isTyping &&\r\n                                                                    <UncontrolledDropdown className=\"align-self-start\">\r\n                                                                        <DropdownToggle tag=\"a\">\r\n                                                                            <i className=\"ri-more-2-fill\"></i>\r\n                                                                        </DropdownToggle>\r\n                                                                        <DropdownMenu>\r\n                                                                            <DropdownItem>{t('Copy')} <i className=\"ri-file-copy-line float-right text-muted\"></i></DropdownItem>\r\n                                                                            <DropdownItem>{t('Save')} <i className=\"ri-save-line float-right text-muted\"></i></DropdownItem>\r\n                                                                            <DropdownItem onClick={toggle}>Forward <i className=\"ri-chat-forward-line float-right text-muted\"></i></DropdownItem>\r\n                                                                            <DropdownItem onClick={() => deleteMessage(chat.id) }>Delete <i className=\"ri-delete-bin-line float-right text-muted\"></i></DropdownItem>\r\n                                                                        </DropdownMenu>\r\n                                                                    </UncontrolledDropdown>\r\n                                                            }\r\n                                                            \r\n                                                        </div>\r\n                                                        {\r\n                                                            chatMessages[key+1] ? chatMessages[key].userType === chatMessages[key+1].userType ? null :  <div className=\"conversation-name\">{chat.userType === \"sender\" ? \"Patricia Smith\" : props.recentChatList[props.active_user].name}</div> : <div className=\"conversation-name\">{chat.userType === \"sender\" ? \"Admin\" : props.recentChatList[props.active_user].name}</div>\r\n                                                        }\r\n                                                        {/* {\r\n                                                            <div className=\"conversation-name\">{chat.userType === \"sender\" ? \"Admin\" : props.recentChatList[props.active_user].name}</div>\r\n                                                        } */}\r\n\r\n                                                    </div>\r\n                                                </div>\r\n                                            </li>\r\n                                    )\r\n                                }\r\n                                 </ul>\r\n                                </SimpleBar>\r\n\r\n                        <Modal backdrop=\"static\" isOpen={modal} centered toggle={toggle}>\r\n                            <ModalHeader toggle={toggle}>Forward to...</ModalHeader>\r\n                            <ModalBody>\r\n                                <CardBody className=\"p-2\">\r\n                                    <SimpleBar style={{maxHeight: \"200px\"}}>\r\n                                        <SelectContact handleCheck={() => {}} />\r\n                                    </SimpleBar>\r\n                                    <ModalFooter className=\"border-0\">\r\n                                        <Button color=\"primary\">Forward</Button>\r\n                                    </ModalFooter>\r\n                                </CardBody>\r\n                            </ModalBody>\r\n                        </Modal>\r\n    \r\n                        <ChatInput onaddMessage={addMessage} />\r\n                    </div>\r\n\r\n                    <UserProfileSidebar activeUser={props.recentChatList[props.active_user]} />\r\n\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { active_user } = state.Chat;\r\n    const { userSidebar } = state.Layout;\r\n    return { active_user,userSidebar };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, { openUserSidebar,setFullUser })(UserChat));\r\n\r\n"]},"metadata":{},"sourceType":"module"}