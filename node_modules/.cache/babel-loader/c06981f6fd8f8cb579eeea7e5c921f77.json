{"ast":null,"code":"import _classCallCheck from\"/home/burak/projects/chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/burak/projects/chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/home/burak/projects/chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/burak/projects/chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/burak/projects/chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Input,InputGroupAddon,InputGroup,Media,Button}from\"reactstrap\";import{Link}from\"react-router-dom\";import{connect}from\"react-redux\";//simplebar\nimport SimpleBar from\"simplebar-react\";//actions\nimport{setconversationNameInOpenChat,activeUser}from\"../../../redux/actions\";//components\nimport OnlineUsers from\"./OnlineUsers\";var Chats=/*#__PURE__*/function(_Component){_inherits(Chats,_Component);var _super=_createSuper(Chats);function Chats(props){var _this;_classCallCheck(this,Chats);_this=_super.call(this,props);_this.state={searchChat:\"\",recentChatList:_this.props.recentChatList};_this.handleChange=_this.handleChange.bind(_assertThisInitialized(_this));_this.openUserChat=_this.openUserChat.bind(_assertThisInitialized(_this));return _this;}_createClass(Chats,[{key:\"componentDidMount\",value:function componentDidMount(){var li=document.getElementById(\"conversation\"+this.props.active_user);if(li){li.classList.add(\"active\");}}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){if(prevProps!==this.props){this.setState({recentChatList:this.props.recentChatList});}}},{key:\"componentWillReceiveProps\",value:function componentWillReceiveProps(nextProps){if(this.props.recentChatList!==nextProps.recentChatList){this.setState({recentChatList:nextProps.recentChatList});}}},{key:\"handleChange\",value:function handleChange(e){this.setState({searchChat:e.target.value});var search=e.target.value;var conversation=this.state.recentChatList;var filteredArray=[];//find conversation name from array\nfor(var i=0;i<conversation.length;i++){if(conversation[i].name.toLowerCase().includes(search)||conversation[i].name.toUpperCase().includes(search))filteredArray.push(conversation[i]);}//set filtered items to state\nthis.setState({recentChatList:filteredArray});//if input value is blanck then assign whole recent chatlist to array\nif(search===\"\")this.setState({recentChatList:this.props.recentChatList});}},{key:\"openUserChat\",value:function openUserChat(e,chat){e.preventDefault();//find index of current chat in array\nvar index=this.props.recentChatList.indexOf(chat);// set activeUser \nthis.props.activeUser(index);var chatList=document.getElementById(\"chat-list\");var clickedItem=e.target;var currentli=null;if(chatList){var li=chatList.getElementsByTagName(\"li\");//remove coversation user\nfor(var i=0;i<li.length;++i){if(li[i].classList.contains('active')){li[i].classList.remove('active');}}//find clicked coversation user\nfor(var k=0;k<li.length;++k){if(li[k].contains(clickedItem)){currentli=li[k];break;}}}//activation of clicked coversation user\nif(currentli){currentli.classList.add('active');}var userChat=document.getElementsByClassName(\"user-chat\");if(userChat){userChat[0].classList.add(\"user-chat-show\");}//removes unread badge if user clicks\nvar unread=document.getElementById(\"unRead\"+chat.id);if(unread){unread.style.display=\"none\";}}},{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"px-4 pt-4\"},/*#__PURE__*/React.createElement(\"h4\",{className:\"mb-4\"},\"Chats\"),/*#__PURE__*/React.createElement(\"div\",{className:\"search-box chat-search-box\"},/*#__PURE__*/React.createElement(InputGroup,{size:\"lg\",className:\"mb-3 bg-light rounded-lg\"},/*#__PURE__*/React.createElement(InputGroupAddon,{addonType:\"prepend\"},/*#__PURE__*/React.createElement(Button,{color:\"link\",className:\"text-muted pr-1 text-decoration-none\",type:\"button\"},/*#__PURE__*/React.createElement(\"i\",{className:\"ri-search-line search-icon font-size-18\"}))),/*#__PURE__*/React.createElement(Input,{type:\"text\",value:this.state.searchChat,onChange:function onChange(e){return _this2.handleChange(e);},className:\"form-control bg-light\",placeholder:\"Search messages or users\"})))),/*#__PURE__*/React.createElement(OnlineUsers,null),/*#__PURE__*/React.createElement(\"div\",{className:\"px-2\"},/*#__PURE__*/React.createElement(\"h5\",{className:\"mb-3 px-3 font-size-16\"},\"Recent\"),/*#__PURE__*/React.createElement(SimpleBar,{style:{maxHeight:\"100%\"},className:\"chat-message-list\"},/*#__PURE__*/React.createElement(\"ul\",{className:\"list-unstyled chat-list chat-user-list\",id:\"chat-list\"},this.state.recentChatList.map(function(chat,key){return/*#__PURE__*/React.createElement(\"li\",{key:key,id:\"conversation\"+key,className:chat.unRead?\"unread\":chat.isTyping?\"typing\":key===_this2.props.active_user?\"active\":\"\"},/*#__PURE__*/React.createElement(Link,{to:\"#\",onClick:function onClick(e){return _this2.openUserChat(e,chat);}},/*#__PURE__*/React.createElement(Media,null,chat.profilePicture===\"Null\"?/*#__PURE__*/React.createElement(\"div\",{className:\"chat-user-img \"+chat.status+\" align-self-center mr-3\"},/*#__PURE__*/React.createElement(\"div\",{className:\"avatar-xs\"},/*#__PURE__*/React.createElement(\"span\",{className:\"avatar-title rounded-circle bg-soft-primary text-primary\"},chat.name.charAt(0))),chat.status&&/*#__PURE__*/React.createElement(\"span\",{className:\"user-status\"})):/*#__PURE__*/React.createElement(\"div\",{className:\"chat-user-img \"+chat.status+\" align-self-center mr-3\"},/*#__PURE__*/React.createElement(\"img\",{src:chat.profilePicture,className:\"rounded-circle avatar-xs\",alt:\"chatvia\"}),chat.status&&/*#__PURE__*/React.createElement(\"span\",{className:\"user-status\"})),/*#__PURE__*/React.createElement(Media,{body:true,className:\"overflow-hidden\"},/*#__PURE__*/React.createElement(\"h5\",{className:\"text-truncate font-size-15 mb-1\"},chat.name),/*#__PURE__*/React.createElement(\"p\",{className:\"chat-user-message text-truncate mb-0\"},chat.isTyping?/*#__PURE__*/React.createElement(React.Fragment,null,\"typing\",/*#__PURE__*/React.createElement(\"span\",{className:\"animate-typing\"},/*#__PURE__*/React.createElement(\"span\",{className:\"dot ml-1\"}),/*#__PURE__*/React.createElement(\"span\",{className:\"dot ml-1\"}),/*#__PURE__*/React.createElement(\"span\",{className:\"dot ml-1\"}))):/*#__PURE__*/React.createElement(React.Fragment,null,chat.messages&&chat.messages.length>0&&chat.messages[chat.messages.length-1].isImageMessage===true?/*#__PURE__*/React.createElement(\"i\",{className:\"ri-image-fill align-middle mr-1\"}):null,chat.messages&&chat.messages.length>0&&chat.messages[chat.messages.length-1].isFileMessage===true?/*#__PURE__*/React.createElement(\"i\",{className:\"ri-file-text-fill align-middle mr-1\"}):null,chat.messages&&chat.messages.length>0?chat.messages[chat.messages.length-1].message:null))),/*#__PURE__*/React.createElement(\"div\",{className:\"font-size-11\"},chat.messages&&chat.messages.length>0?chat.messages[chat.messages.length-1].time:null),chat.unRead===0?null:/*#__PURE__*/React.createElement(\"div\",{className:\"unread-message\",id:\"unRead\"+chat.id},/*#__PURE__*/React.createElement(\"span\",{className:\"badge badge-soft-danger badge-pill\"},chat.messages&&chat.messages.length>0?chat.unRead>=20?chat.unRead+\"+\":chat.unRead:\"\")))));}))))));}}]);return Chats;}(Component);var mapStateToProps=function mapStateToProps(state){var active_user=state.Chat.active_user;return{active_user:active_user};};export default connect(mapStateToProps,{setconversationNameInOpenChat:setconversationNameInOpenChat,activeUser:activeUser})(Chats);","map":{"version":3,"sources":["/home/burak/projects/chat/frontend/src/pages/dashboard/Tabs/Chats.js"],"names":["React","Component","Input","InputGroupAddon","InputGroup","Media","Button","Link","connect","SimpleBar","setconversationNameInOpenChat","activeUser","OnlineUsers","Chats","props","state","searchChat","recentChatList","handleChange","bind","openUserChat","li","document","getElementById","active_user","classList","add","prevProps","setState","nextProps","e","target","value","search","conversation","filteredArray","i","length","name","toLowerCase","includes","toUpperCase","push","chat","preventDefault","index","indexOf","chatList","clickedItem","currentli","getElementsByTagName","contains","remove","k","userChat","getElementsByClassName","unread","id","style","display","maxHeight","map","key","unRead","isTyping","profilePicture","status","charAt","messages","isImageMessage","isFileMessage","message","time","mapStateToProps","Chat"],"mappings":"6vBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,KAAT,CAAgBC,eAAhB,CAAiCC,UAAjC,CAA6CC,KAA7C,CAAoDC,MAApD,KAAkE,YAAlE,CACA,OAASC,IAAT,KAAqB,kBAArB,CACA,OAASC,OAAT,KAAwB,aAAxB,CAEA;AACA,MAAOC,CAAAA,SAAP,KAAsB,iBAAtB,CAEA;AACA,OAASC,6BAAT,CAAwCC,UAAxC,KAA0D,wBAA1D,CAEA;AACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,C,GAEMC,CAAAA,K,8FACF,eAAYC,KAAZ,CAAmB,uCACf,uBAAMA,KAAN,EACA,MAAKC,KAAL,CAAa,CACTC,UAAU,CAAG,EADJ,CAETC,cAAc,CAAG,MAAKH,KAAL,CAAWG,cAFnB,CAAb,CAIA,MAAKC,YAAL,CAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB,CACA,MAAKC,YAAL,CAAoB,MAAKA,YAAL,CAAkBD,IAAlB,+BAApB,CAPe,aAQlB,C,+EAEmB,CAChB,GAAIE,CAAAA,EAAE,CAAGC,QAAQ,CAACC,cAAT,CAAwB,eAAiB,KAAKT,KAAL,CAAWU,WAApD,CAAT,CACA,GAAGH,EAAH,CAAM,CACFA,EAAE,CAACI,SAAH,CAAaC,GAAb,CAAiB,QAAjB,EACH,CACJ,C,8DAEkBC,S,CAAW,CAC1B,GAAIA,SAAS,GAAK,KAAKb,KAAvB,CAA8B,CAC5B,KAAKc,QAAL,CAAc,CACZX,cAAc,CAAG,KAAKH,KAAL,CAAWG,cADhB,CAAd,EAGD,CACJ,C,4EAEyBY,S,CAAW,CACjC,GAAI,KAAKf,KAAL,CAAWG,cAAX,GAA8BY,SAAS,CAACZ,cAA5C,CAA4D,CACxD,KAAKW,QAAL,CAAc,CACVX,cAAc,CAAEY,SAAS,CAACZ,cADhB,CAAd,EAGH,CACJ,C,kDAEYa,C,CAAI,CACb,KAAKF,QAAL,CAAc,CAAEZ,UAAU,CAAGc,CAAC,CAACC,MAAF,CAASC,KAAxB,CAAd,EACA,GAAIC,CAAAA,MAAM,CAAGH,CAAC,CAACC,MAAF,CAASC,KAAtB,CACA,GAAIE,CAAAA,YAAY,CAAG,KAAKnB,KAAL,CAAWE,cAA9B,CACA,GAAIkB,CAAAA,aAAa,CAAG,EAApB,CAEA;AACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,YAAY,CAACG,MAAjC,CAAyCD,CAAC,EAA1C,CAA8C,CAC1C,GAAGF,YAAY,CAACE,CAAD,CAAZ,CAAgBE,IAAhB,CAAqBC,WAArB,GAAmCC,QAAnC,CAA4CP,MAA5C,GAAuDC,YAAY,CAACE,CAAD,CAAZ,CAAgBE,IAAhB,CAAqBG,WAArB,GAAmCD,QAAnC,CAA4CP,MAA5C,CAA1D,CACIE,aAAa,CAACO,IAAd,CAAmBR,YAAY,CAACE,CAAD,CAA/B,EACP,CAED;AACA,KAAKR,QAAL,CAAc,CAAEX,cAAc,CAAGkB,aAAnB,CAAd,EAEA;AACA,GAAGF,MAAM,GAAK,EAAd,CAAkB,KAAKL,QAAL,CAAc,CAAEX,cAAc,CAAG,KAAKH,KAAL,CAAWG,cAA9B,CAAd,EACrB,C,kDAEYa,C,CAAEa,I,CAAM,CAEjBb,CAAC,CAACc,cAAF,GAEA;AACA,GAAIC,CAAAA,KAAK,CAAG,KAAK/B,KAAL,CAAWG,cAAX,CAA0B6B,OAA1B,CAAkCH,IAAlC,CAAZ,CAEA;AACA,KAAK7B,KAAL,CAAWH,UAAX,CAAsBkC,KAAtB,EAEA,GAAIE,CAAAA,QAAQ,CAAGzB,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAf,CACA,GAAIyB,CAAAA,WAAW,CAAGlB,CAAC,CAACC,MAApB,CACA,GAAIkB,CAAAA,SAAS,CAAG,IAAhB,CAEA,GAAGF,QAAH,CAAa,CACT,GAAI1B,CAAAA,EAAE,CAAG0B,QAAQ,CAACG,oBAAT,CAA8B,IAA9B,CAAT,CACA;AACA,IAAI,GAAId,CAAAA,CAAC,CAAC,CAAV,CAAaA,CAAC,CAACf,EAAE,CAACgB,MAAlB,CAA0B,EAAED,CAA5B,CAA8B,CAC1B,GAAGf,EAAE,CAACe,CAAD,CAAF,CAAMX,SAAN,CAAgB0B,QAAhB,CAAyB,QAAzB,CAAH,CAAsC,CAClC9B,EAAE,CAACe,CAAD,CAAF,CAAMX,SAAN,CAAgB2B,MAAhB,CAAuB,QAAvB,EACH,CACJ,CACD;AACA,IAAI,GAAIC,CAAAA,CAAC,CAAC,CAAV,CAAaA,CAAC,CAAChC,EAAE,CAACgB,MAAlB,CAA0B,EAAEgB,CAA5B,CAA8B,CAC1B,GAAGhC,EAAE,CAACgC,CAAD,CAAF,CAAMF,QAAN,CAAeH,WAAf,CAAH,CAAgC,CAC5BC,SAAS,CAAG5B,EAAE,CAACgC,CAAD,CAAd,CACA,MACH,CACJ,CACJ,CAED;AACA,GAAGJ,SAAH,CAAc,CACVA,SAAS,CAACxB,SAAV,CAAoBC,GAApB,CAAwB,QAAxB,EACH,CAED,GAAI4B,CAAAA,QAAQ,CAAGhC,QAAQ,CAACiC,sBAAT,CAAgC,WAAhC,CAAf,CACA,GAAGD,QAAH,CAAa,CACTA,QAAQ,CAAC,CAAD,CAAR,CAAY7B,SAAZ,CAAsBC,GAAtB,CAA0B,gBAA1B,EACH,CAED;AACA,GAAI8B,CAAAA,MAAM,CAAGlC,QAAQ,CAACC,cAAT,CAAwB,SAAWoB,IAAI,CAACc,EAAxC,CAAb,CACA,GAAGD,MAAH,CAAW,CACPA,MAAM,CAACE,KAAP,CAAaC,OAAb,CAAqB,MAArB,CACH,CACJ,C,uCAEQ,iBACL,mBACI,oBAAC,KAAD,CAAO,QAAP,mBACY,4CACI,2BAAK,SAAS,CAAC,WAAf,eACI,0BAAI,SAAS,CAAC,MAAd,UADJ,cAEI,2BAAK,SAAS,CAAC,4BAAf,eACI,oBAAC,UAAD,EAAY,IAAI,CAAC,IAAjB,CAAsB,SAAS,CAAC,0BAAhC,eACI,oBAAC,eAAD,EAAiB,SAAS,CAAC,SAA3B,eACI,oBAAC,MAAD,EAAQ,KAAK,CAAC,MAAd,CAAqB,SAAS,CAAC,sCAA/B,CAAsE,IAAI,CAAC,QAA3E,eACI,yBAAG,SAAS,CAAC,yCAAb,EADJ,CADJ,CADJ,cAMI,oBAAC,KAAD,EAAO,IAAI,CAAC,MAAZ,CAAmB,KAAK,CAAE,KAAK5C,KAAL,CAAWC,UAArC,CAAiD,QAAQ,CAAE,kBAACc,CAAD,QAAO,CAAA,MAAI,CAACZ,YAAL,CAAkBY,CAAlB,CAAP,EAA3D,CAAwF,SAAS,CAAC,uBAAlG,CAA0H,WAAW,CAAC,0BAAtI,EANJ,CADJ,CAFJ,CADJ,cAiBI,oBAAC,WAAD,MAjBJ,cAoBI,2BAAK,SAAS,CAAC,MAAf,eACI,0BAAI,SAAS,CAAC,wBAAd,WADJ,cAEI,oBAAC,SAAD,EAAW,KAAK,CAAE,CAAE8B,SAAS,CAAE,MAAb,CAAlB,CAAyC,SAAS,CAAC,mBAAnD,eAEI,0BAAI,SAAS,CAAC,wCAAd,CAAuD,EAAE,CAAC,WAA1D,EAEQ,KAAK7C,KAAL,CAAWE,cAAX,CAA0B4C,GAA1B,CAA8B,SAAClB,IAAD,CAAOmB,GAAP,qBAC1B,0BAAI,GAAG,CAAEA,GAAT,CAAc,EAAE,CAAE,eAAiBA,GAAnC,CAAwC,SAAS,CAAEnB,IAAI,CAACoB,MAAL,CAAc,QAAd,CAAyBpB,IAAI,CAACqB,QAAL,CAAiB,QAAjB,CAA6BF,GAAG,GAAK,MAAI,CAAChD,KAAL,CAAWU,WAAnB,CAAiC,QAAjC,CAA4C,EAArJ,eACI,oBAAC,IAAD,EAAM,EAAE,CAAC,GAAT,CAAa,OAAO,CAAE,iBAACM,CAAD,QAAO,CAAA,MAAI,CAACV,YAAL,CAAkBU,CAAlB,CAAqBa,IAArB,CAAP,EAAtB,eACI,oBAAC,KAAD,MAEQA,IAAI,CAACsB,cAAL,GAAwB,MAAxB,cACI,2BAAK,SAAS,CAAE,iBAAmBtB,IAAI,CAACuB,MAAxB,CAAgC,yBAAhD,eACI,2BAAK,SAAS,CAAC,WAAf,eACI,4BAAM,SAAS,CAAC,0DAAhB,EACKvB,IAAI,CAACL,IAAL,CAAU6B,MAAV,CAAiB,CAAjB,CADL,CADJ,CADJ,CAOQxB,IAAI,CAACuB,MAAL,eAAgB,4BAAM,SAAS,CAAC,aAAhB,EAPxB,CADJ,cAYI,2BAAK,SAAS,CAAE,iBAAmBvB,IAAI,CAACuB,MAAxB,CAAgC,yBAAhD,eACI,2BAAK,GAAG,CAAEvB,IAAI,CAACsB,cAAf,CAA+B,SAAS,CAAC,0BAAzC,CAAoE,GAAG,CAAC,SAAxE,EADJ,CAGQtB,IAAI,CAACuB,MAAL,eAAgB,4BAAM,SAAS,CAAC,aAAhB,EAHxB,CAdZ,cAsBI,oBAAC,KAAD,EAAO,IAAI,KAAX,CAAY,SAAS,CAAC,iBAAtB,eACI,0BAAI,SAAS,CAAC,iCAAd,EAAiDvB,IAAI,CAACL,IAAtD,CADJ,cAEI,yBAAG,SAAS,CAAC,sCAAb,EAEQK,IAAI,CAACqB,QAAL,cACA,8DACU,4BAAM,SAAS,CAAC,gBAAhB,eACN,4BAAM,SAAS,CAAC,UAAhB,EADM,cAEN,4BAAM,SAAS,CAAC,UAAhB,EAFM,cAGN,4BAAM,SAAS,CAAC,UAAhB,EAHM,CADV,CADA,cASA,wCAEQrB,IAAI,CAACyB,QAAL,EAAkBzB,IAAI,CAACyB,QAAL,CAAc/B,MAAd,CAAuB,CAAvB,EAA4BM,IAAI,CAACyB,QAAL,CAAezB,IAAI,CAACyB,QAAN,CAAgB/B,MAAhB,CAAyB,CAAvC,EAA0CgC,cAA1C,GAA6D,IAA3G,cAAmH,yBAAG,SAAS,CAAC,iCAAb,EAAnH,CAAyK,IAFjL,CAKQ1B,IAAI,CAACyB,QAAL,EAAkBzB,IAAI,CAACyB,QAAL,CAAc/B,MAAd,CAAuB,CAAvB,EAA6BM,IAAI,CAACyB,QAAL,CAAezB,IAAI,CAACyB,QAAN,CAAgB/B,MAAhB,CAAyB,CAAvC,EAA0CiC,aAA1C,GAA4D,IAA3G,cAAmH,yBAAG,SAAS,CAAC,qCAAb,EAAnH,CAA6K,IALrL,CAOK3B,IAAI,CAACyB,QAAL,EAAiBzB,IAAI,CAACyB,QAAL,CAAc/B,MAAd,CAAuB,CAAxC,CAA6CM,IAAI,CAACyB,QAAL,CAAezB,IAAI,CAACyB,QAAN,CAAgB/B,MAAhB,CAAyB,CAAvC,EAA0CkC,OAAvF,CAAiG,IAPtG,CAXR,CAFJ,CAtBJ,cAkDI,2BAAK,SAAS,CAAC,cAAf,EAA+B5B,IAAI,CAACyB,QAAL,EAAiBzB,IAAI,CAACyB,QAAL,CAAc/B,MAAd,CAAuB,CAAxC,CAA6CM,IAAI,CAACyB,QAAL,CAAezB,IAAI,CAACyB,QAAN,CAAgB/B,MAAhB,CAAyB,CAAvC,EAA0CmC,IAAvF,CAA8F,IAA7H,CAlDJ,CAmDK7B,IAAI,CAACoB,MAAL,GAAgB,CAAhB,CAAoB,IAApB,cACG,2BAAK,SAAS,CAAC,gBAAf,CAAgC,EAAE,CAAE,SAAWpB,IAAI,CAACc,EAApD,eACI,4BAAM,SAAS,CAAC,oCAAhB,EAAsDd,IAAI,CAACyB,QAAL,EAAiBzB,IAAI,CAACyB,QAAL,CAAc/B,MAAd,CAAuB,CAAxC,CAA4CM,IAAI,CAACoB,MAAL,EAAe,EAAf,CAAoBpB,IAAI,CAACoB,MAAL,CAAc,GAAlC,CAAwCpB,IAAI,CAACoB,MAAzF,CAAmG,EAAzJ,CADJ,CApDR,CADJ,CADJ,CAD0B,EAA9B,CAFR,CAFJ,CAFJ,CApBJ,CADZ,CADJ,CAoGH,C,mBA1Me9D,S,EA6MpB,GAAMwE,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAC1D,KAAD,CAAW,IACvBS,CAAAA,WADuB,CACPT,KAAK,CAAC2D,IADC,CACvBlD,WADuB,CAE/B,MAAO,CAAEA,WAAW,CAAXA,WAAF,CAAP,CACH,CAHD,CAKA,cAAehB,CAAAA,OAAO,CAACiE,eAAD,CAAkB,CAAE/D,6BAA6B,CAA7BA,6BAAF,CAAiCC,UAAU,CAAVA,UAAjC,CAAlB,CAAP,CAAwEE,KAAxE,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Input, InputGroupAddon, InputGroup, Media, Button } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\n//simplebar\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\n//actions\r\nimport { setconversationNameInOpenChat, activeUser } from \"../../../redux/actions\"\r\n\r\n//components\r\nimport OnlineUsers from \"./OnlineUsers\";\r\n\r\nclass Chats extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchChat : \"\",\r\n            recentChatList : this.props.recentChatList\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.openUserChat = this.openUserChat.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        var li = document.getElementById(\"conversation\" + this.props.active_user);\r\n        if(li){\r\n            li.classList.add(\"active\");\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n          this.setState({\r\n            recentChatList : this.props.recentChatList\r\n          });\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (this.props.recentChatList !== nextProps.recentChatList) {\r\n            this.setState({\r\n                recentChatList: nextProps.recentChatList,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleChange(e)  {\r\n        this.setState({ searchChat : e.target.value });\r\n        var search = e.target.value;\r\n        let conversation = this.state.recentChatList;\r\n        let filteredArray = [];\r\n        \r\n        //find conversation name from array\r\n        for (let i = 0; i < conversation.length; i++) {\r\n            if(conversation[i].name.toLowerCase().includes(search) || conversation[i].name.toUpperCase().includes(search))\r\n                filteredArray.push(conversation[i]);\r\n        }\r\n\r\n        //set filtered items to state\r\n        this.setState({ recentChatList : filteredArray })\r\n\r\n        //if input value is blanck then assign whole recent chatlist to array\r\n        if(search === \"\") this.setState({ recentChatList : this.props.recentChatList })\r\n    }\r\n\r\n    openUserChat(e,chat) {\r\n\r\n        e.preventDefault();\r\n\r\n        //find index of current chat in array\r\n        var index = this.props.recentChatList.indexOf(chat);\r\n\r\n        // set activeUser \r\n        this.props.activeUser(index);\r\n\r\n        var chatList = document.getElementById(\"chat-list\");\r\n        var clickedItem = e.target;\r\n        var currentli = null;\r\n\r\n        if(chatList) {\r\n            var li = chatList.getElementsByTagName(\"li\");\r\n            //remove coversation user\r\n            for(var i=0; i<li.length; ++i){\r\n                if(li[i].classList.contains('active')){\r\n                    li[i].classList.remove('active');\r\n                }\r\n            }\r\n            //find clicked coversation user\r\n            for(var k=0; k<li.length; ++k){\r\n                if(li[k].contains(clickedItem)) {\r\n                    currentli = li[k];\r\n                    break;\r\n                } \r\n            }\r\n        }\r\n\r\n        //activation of clicked coversation user\r\n        if(currentli) {\r\n            currentli.classList.add('active');\r\n        }\r\n\r\n        var userChat = document.getElementsByClassName(\"user-chat\");\r\n        if(userChat) {\r\n            userChat[0].classList.add(\"user-chat-show\");\r\n        }\r\n\r\n        //removes unread badge if user clicks\r\n        var unread = document.getElementById(\"unRead\" + chat.id);\r\n        if(unread) {\r\n            unread.style.display=\"none\";\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                        <div>\r\n                            <div className=\"px-4 pt-4\">\r\n                                <h4 className=\"mb-4\">Chats</h4>\r\n                                <div className=\"search-box chat-search-box\">\r\n                                    <InputGroup size=\"lg\" className=\"mb-3 bg-light rounded-lg\">\r\n                                        <InputGroupAddon addonType=\"prepend\">\r\n                                            <Button color=\"link\" className=\"text-muted pr-1 text-decoration-none\" type=\"button\">\r\n                                                <i className=\"ri-search-line search-icon font-size-18\"></i>\r\n                                            </Button>\r\n                                        </InputGroupAddon>\r\n                                        <Input type=\"text\" value={this.state.searchChat} onChange={(e) => this.handleChange(e)} className=\"form-control bg-light\" placeholder=\"Search messages or users\" />\r\n                                    </InputGroup> \r\n                                </div>\r\n                                {/* Search Box */}\r\n                            </div> \r\n\r\n                            {/* online users */}\r\n                            <OnlineUsers />\r\n\r\n                            {/* Start chat-message-list  */}\r\n                            <div className=\"px-2\">\r\n                                <h5 className=\"mb-3 px-3 font-size-16\">Recent</h5>\r\n                                <SimpleBar style={{ maxHeight: \"100%\" }} className=\"chat-message-list\">\r\n\r\n                                    <ul className=\"list-unstyled chat-list chat-user-list\" id=\"chat-list\">\r\n                                        {\r\n                                            this.state.recentChatList.map((chat, key) =>\r\n                                                <li key={key} id={\"conversation\" + key} className={chat.unRead ? \"unread\" : chat.isTyping ?  \"typing\" :  key === this.props.active_user ? \"active\" : \"\"}>\r\n                                                    <Link to=\"#\" onClick={(e) => this.openUserChat(e, chat)}>\r\n                                                        <Media>\r\n                                                            {\r\n                                                                chat.profilePicture === \"Null\" ?\r\n                                                                    <div className={\"chat-user-img \" + chat.status +\" align-self-center mr-3\"}>\r\n                                                                        <div className=\"avatar-xs\">\r\n                                                                            <span className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                                                                {chat.name.charAt(0)}\r\n                                                                            </span>\r\n                                                                        </div>\r\n                                                                        {\r\n                                                                            chat.status &&  <span className=\"user-status\"></span>\r\n                                                                        }\r\n                                                                    </div>\r\n                                                                :\r\n                                                                    <div className={\"chat-user-img \" + chat.status +\" align-self-center mr-3\"}>\r\n                                                                        <img src={chat.profilePicture} className=\"rounded-circle avatar-xs\" alt=\"chatvia\" />\r\n                                                                        {\r\n                                                                            chat.status &&  <span className=\"user-status\"></span>\r\n                                                                        }\r\n                                                                    </div>\r\n                                                            }\r\n                                                            \r\n                                                            <Media body className=\"overflow-hidden\">\r\n                                                                <h5 className=\"text-truncate font-size-15 mb-1\">{chat.name}</h5>\r\n                                                                <p className=\"chat-user-message text-truncate mb-0\">\r\n                                                                    {\r\n                                                                        chat.isTyping ?\r\n                                                                        <>\r\n                                                                            typing<span className=\"animate-typing\">\r\n                                                                            <span className=\"dot ml-1\"></span>\r\n                                                                            <span className=\"dot ml-1\"></span>\r\n                                                                            <span className=\"dot ml-1\"></span>\r\n                                                                        </span>\r\n                                                                        </>\r\n                                                                        :\r\n                                                                        <>\r\n                                                                            {\r\n                                                                                chat.messages && (chat.messages.length > 0 && chat.messages[(chat.messages).length - 1].isImageMessage === true) ? <i className=\"ri-image-fill align-middle mr-1\"></i> : null\r\n                                                                            }\r\n                                                                            {\r\n                                                                                chat.messages && (chat.messages.length > 0  && chat.messages[(chat.messages).length - 1].isFileMessage === true) ? <i className=\"ri-file-text-fill align-middle mr-1\"></i> : null\r\n                                                                            }\r\n                                                                            {chat.messages && chat.messages.length > 0 ?  chat.messages[(chat.messages).length - 1].message : null}\r\n                                                                       </>\r\n                                                                    }\r\n\r\n                                                    \r\n                                                                    \r\n                                                                </p>\r\n                                                            </Media>\r\n                                                            <div className=\"font-size-11\">{chat.messages && chat.messages.length > 0 ?  chat.messages[(chat.messages).length - 1].time : null}</div>\r\n                                                            {chat.unRead === 0 ? null :\r\n                                                                <div className=\"unread-message\" id={\"unRead\" + chat.id}>\r\n                                                                    <span className=\"badge badge-soft-danger badge-pill\">{chat.messages && chat.messages.length > 0 ? chat.unRead >= 20 ? chat.unRead + \"+\" : chat.unRead  : \"\"}</span>\r\n                                                                </div>\r\n                                                            } \r\n                                                        </Media>\r\n                                                    </Link>\r\n                                                </li>\r\n                                            )\r\n                                        }\r\n                                    </ul>\r\n                                    </SimpleBar>\r\n                                    \r\n                            </div>\r\n                            {/* End chat-message-list */}\r\n                        </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { active_user } = state.Chat;\r\n    return { active_user };\r\n};\r\n\r\nexport default connect(mapStateToProps, { setconversationNameInOpenChat, activeUser })(Chats);"]},"metadata":{},"sourceType":"module"}