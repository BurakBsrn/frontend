{"ast":null,"code":"import _classCallCheck from\"/home/burak/projects/chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/burak/projects/chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/home/burak/projects/chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/burak/projects/chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/burak/projects/chat/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{UncontrolledDropdown,DropdownToggle,DropdownMenu,DropdownItem,Media,Button,Modal,ModalHeader,ModalBody,ModalFooter,UncontrolledTooltip,Form,FormGroup,Label,Input,InputGroup,InputGroupAddon}from'reactstrap';import SimpleBar from\"simplebar-react\";import{connect}from\"react-redux\";import{withTranslation}from'react-i18next';//use sortedContacts variable as global variable to sort contacts\nvar sortedContacts=[{group:\"A\",children:[{name:\"Demo\"}]}];var Contacts=/*#__PURE__*/function(_Component){_inherits(Contacts,_Component);var _super=_createSuper(Contacts);function Contacts(props){var _this;_classCallCheck(this,Contacts);_this=_super.call(this,props);_this.state={modal:false,contacts:_this.props.contacts};_this.toggle=_this.toggle.bind(_assertThisInitialized(_this));_this.sortContact=_this.sortContact.bind(_assertThisInitialized(_this));return _this;}_createClass(Contacts,[{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){if(prevProps!==this.props){this.setState({contacts:this.props.contacts});}}},{key:\"toggle\",value:function toggle(){this.setState({modal:!this.state.modal});}},{key:\"sortContact\",value:function sortContact(){var data=this.state.contacts.reduce(function(r,e){try{// get first letter of name of current element\nvar group=e.name[0];// if there is no property in accumulator with this letter create it\nif(!r[group])r[group]={group:group,children:[e]};// if there is push current element to children array for that letter\nelse r[group].children.push(e);}catch(error){return sortedContacts;}// return accumulator\nreturn r;},{});// since data at this point is an object, to get array of values\n// we use Object.values method\nvar result=Object.values(data);this.setState({contacts:result});sortedContacts=result;return result;}},{key:\"componentDidMount\",value:function componentDidMount(){this.sortContact();}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this.sortContact();}},{key:\"render\",value:function render(){var t=this.props.t;return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"p-4\"},/*#__PURE__*/React.createElement(\"div\",{className:\"user-chat-nav float-right\"},/*#__PURE__*/React.createElement(\"div\",{id:\"add-contact\"},/*#__PURE__*/React.createElement(Button,{type:\"button\",color:\"link\",onClick:this.toggle,className:\"text-decoration-none text-muted font-size-18 py-0\"},/*#__PURE__*/React.createElement(\"i\",{className:\"ri-user-add-line\"}))),/*#__PURE__*/React.createElement(UncontrolledTooltip,{target:\"add-contact\",placement:\"bottom\"},\"Add Contact\")),/*#__PURE__*/React.createElement(\"h4\",{className:\"mb-4\"},\"Contacts\"),/*#__PURE__*/React.createElement(Modal,{isOpen:this.state.modal,centered:true,toggle:this.toggle},/*#__PURE__*/React.createElement(ModalHeader,{tag:\"h5\",className:\"font-size-16\",toggle:this.toggle},t('Add Contacts')),/*#__PURE__*/React.createElement(ModalBody,{className:\"p-4\"},/*#__PURE__*/React.createElement(Form,null,/*#__PURE__*/React.createElement(FormGroup,{className:\"mb-4\"},/*#__PURE__*/React.createElement(Label,{htmlFor:\"addcontactemail-input\"},t('Email')),/*#__PURE__*/React.createElement(Input,{type:\"email\",className:\"form-control\",id:\"addcontactemail-input\",placeholder:\"Enter Email\"})),/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Label,{htmlFor:\"addcontact-invitemessage-input\"},t('Invatation Message')),/*#__PURE__*/React.createElement(\"textarea\",{className:\"form-control\",id:\"addcontact-invitemessage-input\",rows:\"3\",placeholder:\"Enter Message\"})))),/*#__PURE__*/React.createElement(ModalFooter,null,/*#__PURE__*/React.createElement(Button,{type:\"button\",color:\"link\",onClick:this.toggle},\"Close\"),/*#__PURE__*/React.createElement(Button,{type:\"button\",color:\"primary\"},\"Invite Contact\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"search-box chat-search-box\"},/*#__PURE__*/React.createElement(InputGroup,{size:\"lg\",className:\"bg-light rounded-lg\"},/*#__PURE__*/React.createElement(InputGroupAddon,{addonType:\"prepend\"},/*#__PURE__*/React.createElement(Button,{color:\"link\",className:\"text-decoration-none text-muted pr-1\",type:\"button\"},/*#__PURE__*/React.createElement(\"i\",{className:\"ri-search-line search-icon font-size-18\"}))),/*#__PURE__*/React.createElement(Input,{type:\"text\",className:\"form-control bg-light \",placeholder:t('Search users..')})))),/*#__PURE__*/React.createElement(SimpleBar,{style:{maxHeight:\"100%\"},id:\"chat-room\",className:\"p-4 chat-message-list chat-group-list\"},sortedContacts.map(function(contact,key){return/*#__PURE__*/React.createElement(\"div\",{key:key,className:key+1===1?\"\":\"mt-3\"},/*#__PURE__*/React.createElement(\"div\",{className:\"p-3 font-weight-bold text-primary\"},contact.group),/*#__PURE__*/React.createElement(\"ul\",{className:\"list-unstyled contact-list\"},contact.children.map(function(child,key){return/*#__PURE__*/React.createElement(\"li\",{key:key},/*#__PURE__*/React.createElement(Media,{className:\"align-items-center\"},/*#__PURE__*/React.createElement(Media,{body:true},/*#__PURE__*/React.createElement(\"h5\",{className:\"font-size-14 m-0\"},child.name)),/*#__PURE__*/React.createElement(UncontrolledDropdown,null,/*#__PURE__*/React.createElement(DropdownToggle,{tag:\"a\",className:\"text-muted\"},/*#__PURE__*/React.createElement(\"i\",{className:\"ri-more-2-fill\"})),/*#__PURE__*/React.createElement(DropdownMenu,{right:true},/*#__PURE__*/React.createElement(DropdownItem,null,t('Share'),\" \",/*#__PURE__*/React.createElement(\"i\",{className:\"ri-share-line float-right text-muted\"})),/*#__PURE__*/React.createElement(DropdownItem,null,t('Block'),\" \",/*#__PURE__*/React.createElement(\"i\",{className:\"ri-forbid-line float-right text-muted\"})),/*#__PURE__*/React.createElement(DropdownItem,null,t('Remove'),\" \",/*#__PURE__*/React.createElement(\"i\",{className:\"ri-delete-bin-line float-right text-muted\"}))))));})));}))));}}]);return Contacts;}(Component);var mapStateToProps=function mapStateToProps(state){var contacts=state.Chat.contacts;return{contacts:contacts};};export default connect(mapStateToProps,null)(withTranslation()(Contacts));","map":{"version":3,"sources":["/home/burak/projects/chat/frontend/src/pages/dashboard/Tabs/Contacts.js"],"names":["React","Component","UncontrolledDropdown","DropdownToggle","DropdownMenu","DropdownItem","Media","Button","Modal","ModalHeader","ModalBody","ModalFooter","UncontrolledTooltip","Form","FormGroup","Label","Input","InputGroup","InputGroupAddon","SimpleBar","connect","withTranslation","sortedContacts","group","children","name","Contacts","props","state","modal","contacts","toggle","bind","sortContact","prevProps","setState","data","reduce","r","e","push","error","result","Object","values","t","maxHeight","map","contact","key","child","mapStateToProps","Chat"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, Media, Button, Modal, ModalHeader, ModalBody, ModalFooter, UncontrolledTooltip, Form, FormGroup, Label, Input, InputGroup, InputGroupAddon, } from 'reactstrap';\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { withTranslation } from 'react-i18next';\r\n\r\n//use sortedContacts variable as global variable to sort contacts\r\nlet sortedContacts = [\r\n    { group : \"A\",\r\n        children : [{name : \"Demo\"}]\r\n    }\r\n]\r\n\r\nclass Contacts extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            modal : false,\r\n            contacts : this.props.contacts\r\n        }\r\n        this.toggle = this.toggle.bind(this);\r\n        this.sortContact = this.sortContact.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n          this.setState({\r\n            contacts : this.props.contacts\r\n          });\r\n        }\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({modal : !this.state.modal});\r\n    }\r\n\r\n    sortContact(){\r\n        let data = this.state.contacts.reduce((r, e) => {\r\n            try {\r\n                // get first letter of name of current element\r\n                let group = e.name[0];\r\n                // if there is no property in accumulator with this letter create it\r\n                if(!r[group]) r[group] = {group, children: [e]}\r\n                // if there is push current element to children array for that letter\r\n                else r[group].children.push(e);\r\n            } catch (error) {\r\n                return sortedContacts;\r\n            }\r\n            // return accumulator\r\n            return r;\r\n        }, {})\r\n          \r\n        // since data at this point is an object, to get array of values\r\n        // we use Object.values method\r\n        let result = Object.values(data);\r\n        this.setState({contacts : result});\r\n        sortedContacts = result;\r\n        return result;\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.sortContact();\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.sortContact();\r\n    }\r\n    \r\n    render() {\r\n        const { t } = this.props;\r\n        return (\r\n            <React.Fragment>\r\n            <div>\r\n                            <div className=\"p-4\">\r\n                                <div className=\"user-chat-nav float-right\">\r\n                                    <div id=\"add-contact\">\r\n                                        {/* Button trigger modal */}\r\n                                        <Button type=\"button\" color=\"link\" onClick={this.toggle} className=\"text-decoration-none text-muted font-size-18 py-0\">\r\n                                            <i className=\"ri-user-add-line\"></i>\r\n                                        </Button>\r\n                                    </div>\r\n                                    <UncontrolledTooltip target=\"add-contact\" placement=\"bottom\">\r\n                                        Add Contact\r\n                                    </UncontrolledTooltip>\r\n                                </div>\r\n                                <h4 className=\"mb-4\">Contacts</h4>\r\n\r\n                                {/* Start Add contact Modal */}\r\n                                <Modal isOpen={this.state.modal} centered toggle={this.toggle}>\r\n                                            <ModalHeader tag=\"h5\" className=\"font-size-16\" toggle={this.toggle}>\r\n                                                {t('Add Contacts')}\r\n                                            </ModalHeader>\r\n                                            <ModalBody className=\"p-4\">\r\n                                                <Form>\r\n                                                    <FormGroup className=\"mb-4\">\r\n                                                        <Label htmlFor=\"addcontactemail-input\">{t('Email')}</Label>\r\n                                                        <Input type=\"email\" className=\"form-control\" id=\"addcontactemail-input\" placeholder=\"Enter Email\" />\r\n                                                    </FormGroup>\r\n                                                    <FormGroup>\r\n                                                        <Label htmlFor=\"addcontact-invitemessage-input\">{t('Invatation Message')}</Label>\r\n                                                        <textarea className=\"form-control\" id=\"addcontact-invitemessage-input\" rows=\"3\" placeholder=\"Enter Message\"></textarea>\r\n                                                    </FormGroup>\r\n                                                </Form>\r\n                                            </ModalBody>\r\n                                            <ModalFooter>\r\n                                                <Button type=\"button\" color=\"link\" onClick={this.toggle}>Close</Button>\r\n                                                <Button type=\"button\" color=\"primary\">Invite Contact</Button>\r\n                                            </ModalFooter>\r\n                                </Modal>\r\n                                {/* End Add contact Modal */}\r\n\r\n                                <div className=\"search-box chat-search-box\">\r\n                                    <InputGroup size=\"lg\" className=\"bg-light rounded-lg\">\r\n                                        <InputGroupAddon addonType=\"prepend\">\r\n                                            <Button color=\"link\" className=\"text-decoration-none text-muted pr-1\" type=\"button\">\r\n                                                <i className=\"ri-search-line search-icon font-size-18\"></i>\r\n                                            </Button>\r\n                                        </InputGroupAddon>\r\n                                        <Input type=\"text\" className=\"form-control bg-light \" placeholder={t('Search users..')} />\r\n                                    </InputGroup>\r\n                                </div>\r\n                                {/* End search-box */}\r\n                            </div>\r\n                            {/* end p-4 */}\r\n\r\n                            {/* Start contact lists */}\r\n                            <SimpleBar style={{ maxHeight: \"100%\" }} id=\"chat-room\" className=\"p-4 chat-message-list chat-group-list\">\r\n\r\n                                {\r\n                                    sortedContacts.map((contact, key) => \r\n                                        <div key={key} className={key+1 === 1 ? \"\" : \"mt-3\"}>\r\n                                            <div className=\"p-3 font-weight-bold text-primary\">\r\n                                                {contact.group}\r\n                                            </div>\r\n\r\n                                            <ul className=\"list-unstyled contact-list\">\r\n                                                {\r\n                                                    contact.children.map((child, key) =>\r\n                                                        <li key={key} >\r\n                                                            <Media className=\"align-items-center\">\r\n                                                                <Media body>\r\n                                                                    <h5 className=\"font-size-14 m-0\">{child.name}</h5>\r\n                                                                </Media>\r\n                                                                <UncontrolledDropdown>\r\n                                                                    <DropdownToggle tag=\"a\" className=\"text-muted\">\r\n                                                                    <i className=\"ri-more-2-fill\"></i>\r\n                                                                    </DropdownToggle>\r\n                                                                    <DropdownMenu right>\r\n                                                                        <DropdownItem>{t('Share')} <i className=\"ri-share-line float-right text-muted\"></i></DropdownItem>\r\n                                                                        <DropdownItem>{t('Block')} <i className=\"ri-forbid-line float-right text-muted\"></i></DropdownItem>\r\n                                                                        <DropdownItem>{t('Remove')} <i className=\"ri-delete-bin-line float-right text-muted\"></i></DropdownItem>\r\n                                                                    </DropdownMenu>\r\n                                                                </UncontrolledDropdown>\r\n                                                            </Media>\r\n                                                        </li>\r\n                                                    )\r\n                                                }\r\n                                            </ul>\r\n                                    </div>\r\n                                    )\r\n                                }\r\n                                \r\n                            </SimpleBar>\r\n                            {/* end contact lists */}\r\n                        </div>\r\n        </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { contacts } = state.Chat;\r\n    return { contacts };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(withTranslation()(Contacts));"]},"metadata":{},"sourceType":"module"}